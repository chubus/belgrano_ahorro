#!/usr/bin/env python3
"""
Script de verificaci√≥n de conexi√≥n entre plataformas para deploy
Verifica que Belgrano Ahorro y Belgrano Tickets se comuniquen correctamente
"""

import requests
import time
import json
import os
from datetime import datetime

def verificar_conexion_entre_plataformas():
    """Verificar que ambas plataformas se comunican correctamente"""
    
    print("üîç VERIFICACI√ìN DE CONEXI√ìN ENTRE PLATAFORMAS")
    print("=" * 50)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # URLs de producci√≥n (configurables)
    ahorro_url = os.environ.get('AHORRO_URL', 'https://belgrano-ahorro.onrender.com')
    tickets_url = os.environ.get('TICKETS_URL', 'https://belgrano-tickets.onrender.com')
    
    print(f"üåê Belgrano Ahorro: {ahorro_url}")
    print(f"üé´ Belgrano Tickets: {tickets_url}")
    print()
    
    resultados = {
        'ahorro_status': False,
        'tickets_status': False,
        'api_integration': False,
        'errors': []
    }
    
    # 1. Verificar que Belgrano Ahorro responde
    print("1Ô∏è‚É£ Verificando Belgrano Ahorro...")
    try:
        response = requests.get(f"{ahorro_url}/test", timeout=10)
        if response.status_code == 200:
            print("   ‚úÖ Belgrano Ahorro est√° funcionando")
            resultados['ahorro_status'] = True
        else:
            print(f"   ‚ö†Ô∏è Belgrano Ahorro responde con c√≥digo: {response.status_code}")
            resultados['errors'].append(f"Ahorro status code: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("   ‚ùå No se puede conectar a Belgrano Ahorro")
        resultados['errors'].append("Connection error to Ahorro")
    except requests.exceptions.Timeout:
        print("   ‚è∞ Timeout conectando a Belgrano Ahorro")
        resultados['errors'].append("Timeout connecting to Ahorro")
    except Exception as e:
        print(f"   ‚ùå Error conectando a Belgrano Ahorro: {e}")
        resultados['errors'].append(f"Error connecting to Ahorro: {e}")
    
    print()
    
    # 2. Verificar que Belgrano Tickets responde
    print("2Ô∏è‚É£ Verificando Belgrano Tickets...")
    try:
        response = requests.get(f"{tickets_url}/health", timeout=10)
        if response.status_code == 200:
            print("   ‚úÖ Belgrano Tickets est√° funcionando")
            resultados['tickets_status'] = True
            
            # Mostrar informaci√≥n del health check
            try:
                health_data = response.json()
                print(f"   üìä Estado: {health_data.get('status', 'N/A')}")
                print(f"   üóÑÔ∏è Base de datos: {health_data.get('database', 'N/A')}")
                print(f"   üé´ Total tickets: {health_data.get('total_tickets', 'N/A')}")
            except:
                print("   üìÑ Respuesta de texto recibida")
        else:
            print(f"   ‚ö†Ô∏è Belgrano Tickets responde con c√≥digo: {response.status_code}")
            resultados['errors'].append(f"Tickets status code: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("   ‚ùå No se puede conectar a Belgrano Tickets")
        resultados['errors'].append("Connection error to Tickets")
    except requests.exceptions.Timeout:
        print("   ‚è∞ Timeout conectando a Belgrano Tickets")
        resultados['errors'].append("Timeout connecting to Tickets")
    except Exception as e:
        print(f"   ‚ùå Error conectando a Belgrano Tickets: {e}")
        resultados['errors'].append(f"Error connecting to Tickets: {e}")
    
    print()
    
    # 3. Verificar API de integraci√≥n
    print("3Ô∏è‚É£ Verificando API de integraci√≥n...")
    if resultados['tickets_status']:
        try:
            test_data = {
                "numero": f"TEST-{int(time.time())}",
                "cliente_nombre": "Cliente Test Deploy",
                "cliente_direccion": "Direcci√≥n Test Deploy",
                "cliente_telefono": "123456789",
                "cliente_email": "test-deploy@belgranoahorro.com",
                "productos": ["Producto Test Deploy x1"],
                "total": 100.0,
                "metodo_pago": "efectivo",
                "indicaciones": "Test de integraci√≥n para deploy"
            }
            
            print(f"   üì§ Enviando datos de prueba: {test_data['numero']}")
            
            response = requests.post(
                f"{tickets_url}/api/tickets",
                json=test_data,
                headers={'Content-Type': 'application/json'},
                timeout=15
            )
            
            if response.status_code == 201:
                print("   ‚úÖ API de integraci√≥n funciona correctamente")
                resultados['api_integration'] = True
                
                try:
                    response_data = response.json()
                    print(f"   üé´ Ticket creado: {response_data.get('ticket_id', 'N/A')}")
                except:
                    print("   üìÑ Respuesta recibida")
            else:
                print(f"   ‚ö†Ô∏è API de integraci√≥n responde con c√≥digo: {response.status_code}")
                print(f"   üìÑ Respuesta: {response.text}")
                resultados['errors'].append(f"API integration status code: {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("   ‚ùå No se puede conectar a la API de integraci√≥n")
            resultados['errors'].append("Connection error to API integration")
        except requests.exceptions.Timeout:
            print("   ‚è∞ Timeout en API de integraci√≥n")
            resultados['errors'].append("Timeout in API integration")
        except Exception as e:
            print(f"   ‚ùå Error en API de integraci√≥n: {e}")
            resultados['errors'].append(f"Error in API integration: {e}")
    else:
        print("   ‚è≠Ô∏è Saltando verificaci√≥n de API (Tickets no disponible)")
    
    print()
    
    # 4. Resumen de resultados
    print("üìã RESUMEN DE VERIFICACI√ìN")
    print("=" * 30)
    
    total_checks = 3
    passed_checks = sum([
        resultados['ahorro_status'],
        resultados['tickets_status'],
        resultados['api_integration']
    ])
    
    print(f"‚úÖ Checks pasados: {passed_checks}/{total_checks}")
    print(f"‚ùå Checks fallidos: {total_checks - passed_checks}/{total_checks}")
    
    if resultados['ahorro_status']:
        print("   ‚úÖ Belgrano Ahorro: FUNCIONANDO")
    else:
        print("   ‚ùå Belgrano Ahorro: FALLO")
    
    if resultados['tickets_status']:
        print("   ‚úÖ Belgrano Tickets: FUNCIONANDO")
    else:
        print("   ‚ùå Belgrano Tickets: FALLO")
    
    if resultados['api_integration']:
        print("   ‚úÖ API de Integraci√≥n: FUNCIONANDO")
    else:
        print("   ‚ùå API de Integraci√≥n: FALLO")
    
    if resultados['errors']:
        print()
        print("üö® ERRORES DETECTADOS:")
        for i, error in enumerate(resultados['errors'], 1):
            print(f"   {i}. {error}")
    
    print()
    
    # 5. Recomendaciones
    print("üí° RECOMENDACIONES")
    print("=" * 20)
    
    if passed_checks == total_checks:
        print("üéâ ¬°Sistema completamente funcional!")
        print("   - Todas las plataformas est√°n operativas")
        print("   - La integraci√≥n funciona correctamente")
        print("   - El sistema est√° listo para producci√≥n")
    elif passed_checks >= 2:
        print("‚ö†Ô∏è Sistema parcialmente funcional")
        print("   - Algunas funciones pueden no estar disponibles")
        print("   - Revisar los errores listados arriba")
        print("   - Verificar configuraci√≥n de URLs")
    else:
        print("üö® Sistema con problemas cr√≠ticos")
        print("   - Revisar configuraci√≥n de deploy")
        print("   - Verificar que las aplicaciones est√©n ejecut√°ndose")
        print("   - Comprobar variables de entorno")
    
    return resultados

def verificar_endpoints_detallado():
    """Verificaci√≥n detallada de endpoints espec√≠ficos"""
    
    print("\nüîç VERIFICACI√ìN DETALLADA DE ENDPOINTS")
    print("=" * 40)
    
    ahorro_url = os.environ.get('AHORRO_URL', 'https://belgrano-ahorro.onrender.com')
    tickets_url = os.environ.get('TICKETS_URL', 'https://belgrano-tickets.onrender.com')
    
    endpoints_ahorro = [
        ('/', 'P√°gina principal'),
        ('/test', 'Test de funcionamiento'),
        ('/login', 'P√°gina de login'),
        ('/register', 'P√°gina de registro')
    ]
    
    endpoints_tickets = [
        ('/', 'P√°gina principal'),
        ('/health', 'Health check'),
        ('/login', 'Login admin'),
        ('/admin', 'Panel admin')
    ]
    
    print("üåê Endpoints Belgrano Ahorro:")
    for endpoint, desc in endpoints_ahorro:
        try:
            response = requests.get(f"{ahorro_url}{endpoint}", timeout=5)
            status = "‚úÖ" if response.status_code < 400 else "‚ö†Ô∏è"
            print(f"   {status} {endpoint} - {desc} ({response.status_code})")
        except:
            print(f"   ‚ùå {endpoint} - {desc} (Error de conexi√≥n)")
    
    print("\nüé´ Endpoints Belgrano Tickets:")
    for endpoint, desc in endpoints_tickets:
        try:
            response = requests.get(f"{tickets_url}{endpoint}", timeout=5)
            status = "‚úÖ" if response.status_code < 400 else "‚ö†Ô∏è"
            print(f"   {status} {endpoint} - {desc} ({response.status_code})")
        except:
            print(f"   ‚ùå {endpoint} - {desc} (Error de conexi√≥n)")

def generar_reporte(resultados):
    """Generar reporte en formato JSON"""
    
    reporte = {
        'fecha_verificacion': datetime.now().isoformat(),
        'resultados': resultados,
        'configuracion': {
            'ahorro_url': os.environ.get('AHORRO_URL', 'https://belgrano-ahorro.onrender.com'),
            'tickets_url': os.environ.get('TICKETS_URL', 'https://belgrano-tickets.onrender.com')
        }
    }
    
    # Guardar reporte
    with open('reporte_verificacion_deploy.json', 'w') as f:
        json.dump(reporte, f, indent=2)
    
    print("\nüìÑ Reporte guardado en: reporte_verificacion_deploy.json")

if __name__ == "__main__":
    print("üöÄ INICIANDO VERIFICACI√ìN DE DEPLOY")
    print("=" * 40)
    
    # Verificaci√≥n principal
    resultados = verificar_conexion_entre_plataformas()
    
    # Verificaci√≥n detallada
    verificar_endpoints_detallado()
    
    # Generar reporte
    generar_reporte(resultados)
    
    print("\nüèÅ Verificaci√≥n completada")
    print("=" * 25)
